<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Architecture" xml:space="preserve">
    <value>Architecture</value>
  </data>
  <data name="architecture_1st" xml:space="preserve">
    <value>The architecture used in this application is based on Clean Architecture, which has become the standard for writing WebAPIs. It involves separating business logic from databases and user interfaces. This creates a layered structure where each layer communicates with the others in a defined way.</value>
  </data>
  <data name="architecture_2nd" xml:space="preserve">
    <value>Additionally, the application is built using a distributed architecture, specifically microservices. It is divided into modules, such as the API responsible for business logic related to transactions and budgeting, and the graphical user interface. These modules are connected by an API Gateway, which routes requests between the modules.</value>
  </data>
  <data name="Item1Description" xml:space="preserve">
    <value>Application will help you control your expenses and save money.</value>
  </data>
  <data name="Item1Header" xml:space="preserve">
    <value>Welcome in budget App!</value>
  </data>
  <data name="Item2ActionText" xml:space="preserve">
    <value>Learn more about Blazor</value>
  </data>
  <data name="Item2Description" xml:space="preserve">
    <value>System will automatically divide them according to the given pattern.</value>
  </data>
  <data name="Item2Header" xml:space="preserve">
    <value>You can add your monthly incomes and expenses.</value>
  </data>
  <data name="Item3ActionText" xml:space="preserve">
    <value>Learn about managing budget</value>
  </data>
  <data name="Item3Description" xml:space="preserve">
    <value>There are monthly, yearly and other unconventional statistics. e.g. On which days do you do more shopping? Even or odd?</value>
  </data>
  <data name="Item3Header" xml:space="preserve">
    <value>You can check your budget statistics.</value>
  </data>
  <data name="Item4Description" xml:space="preserve">
    <value>You set the expense as a deposit and link it to a goal, and the app continuously analyzes and displays your progress towards achieving the goal.</value>
  </data>
  <data name="Item4Header" xml:space="preserve">
    <value>With this app you can create goals for which you save money.</value>
  </data>
  <data name="Motivation" xml:space="preserve">
    <value>Motivation</value>
  </data>
  <data name="motivation_1st" xml:space="preserve">
    <value>Since I started working, I noticed that it’s worth dividing income into specific categories. I divided them into savings, daily expenses, and those related to entertainment. This allowed for clear budget management, and the savings generated helped build a financial safety net. In the beginning, I would write this down on paper. In fact, long before I started working, I would note my expenses on sheets of paper, which often got lost. That's why I decided to switch to electronic record-keeping. I chose Excel spreadsheets for this. However, I didn't really like it due to its clunky appearance and lack of functionalities I wanted.</value>
  </data>
  <data name="motivation_2nd" xml:space="preserve">
    <value>In the meantime, I decided to start designing my own application. It was supposed to automate processes that I previously had to calculate and managed manually. Additionally, I wanted it to be simple to use and have the functionalities I required. The great thing is that I can design and implement features myself. Without much hesitation, I began creating this application.</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="ToolsFrameworks" xml:space="preserve">
    <value>Tools and frameworks</value>
  </data>
</root>