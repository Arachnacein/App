<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Architecture" xml:space="preserve">
    <value>Architektura</value>
  </data>
  <data name="architecture_1st" xml:space="preserve">
    <value>Architektura użyta w tej aplikacji opiera się na Clean Architecture, która stała się standardem przy tworzeniu WebAPI. Polega ona na oddzieleniu logiki biznesowej od baz danych i interfejsów użytkownika. Tworzy to warstwową strukturę, w której każda warstwa komunikuje się z pozostałymi w określony sposób.</value>
  </data>
  <data name="architecture_2nd" xml:space="preserve">
    <value>Dodatkowo aplikacja jest zbudowana w oparciu o architekturę rozproszoną, a dokładniej mikroserwisy. Jest podzielona na moduły, takie jak API odpowiedzialne za logikę biznesową związaną z transakcjami i budżetowaniem oraz graficzny interfejs użytkownika. Moduły te są połączone za pomocą API Gateway, który przekierowuje żądania między modułami.</value>
  </data>
  <data name="Item1Description" xml:space="preserve">
    <value>Aplikacja pomoże Ci kontrolować wydatki i dzięi temu oszczędzać pieniądze.</value>
  </data>
  <data name="Item1Header" xml:space="preserve">
    <value>Witaj w aplikacji do zarządzania budżetem!</value>
  </data>
  <data name="Item2ActionText" xml:space="preserve">
    <value>Dowiedz się więcej o Blazor.</value>
  </data>
  <data name="Item2Description" xml:space="preserve">
    <value>System automatycznie podzieli je zgodnie z określonym wzorem.</value>
  </data>
  <data name="Item2Header" xml:space="preserve">
    <value>Tu możesz dodawać swoje miesięczne dochody i wydatki.</value>
  </data>
  <data name="Item3ActionText" xml:space="preserve">
    <value>Dowiedz się więcej o pieniądzach i szczędzaniu</value>
  </data>
  <data name="Item3Description" xml:space="preserve">
    <value>Dostępne są statystyki miesięczne, roczne oraz inne nietypowe statystyki, np. W które dni robisz więcej zakupów? Parzyste czy nieparzyste?</value>
  </data>
  <data name="Item3Header" xml:space="preserve">
    <value>W aplikacji możesz sprawdzać statystyki swojego budżetu.</value>
  </data>
  <data name="Item4Description" xml:space="preserve">
    <value>Możeszdodać  wydatek jako wpłatę i złączyć ją z celem, a aplikacja na bieżąco przeanalizuje i wyświetli Twój postęp w osiąganiu celu.</value>
  </data>
  <data name="Item4Header" xml:space="preserve">
    <value>Dzięki tej aplikacji możesz tworzyć cele, na które oszczędzasz pieniądze.</value>
  </data>
  <data name="Motivation" xml:space="preserve">
    <value>Motywacja</value>
  </data>
  <data name="motivation_1st" xml:space="preserve">
    <value>Od kiedy zacząłem pracować, zauważyłem, że warto dzielić dochody na konkretne kategorie. Podzieliłem je na oszczędności, codzienne wydatki oraz te związane z rozrywką. Dzięki temu możliwe było jasne zarządzanie budżetem, a wygenerowane oszczędności pomogły zbudować finansową poduszkę bezpieczeństwa. Na początku zapisywałem to na kartkach papieru. W rzeczywistości, jeszcze przed rozpoczęciem pracy, notowałem swoje wydatki na kartkach, które często się gubiły. Dlatego postanowiłem przejść na elektroniczny sposób zapisu. Wybrałem do tego arkusze Excela. Jednak ten sposób niezbyt mi odpowiadał ze względu na mało przejrzysty wygląd i brak funkcjonalności, których potrzebowałem.</value>
  </data>
  <data name="motivation_2nd" xml:space="preserve">
    <value>W międzyczasie postanowiłem zacząć projektować własną aplikację. Miała ona zautomatyzować procesy, które wcześniej musiałem obliczać i zarządzać ręcznie. Dodatkowo chciałem, żeby była prosta w obsłudze i miała funkcje, których potrzebowałem. Najlepsze jest to, że mogę sam zaprojektować i wdrożyć potrzebne funkcjonalności. Bez większych wahań przystąpiłem do tworzenia tej aplikacji.</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Strona główna</value>
  </data>
  <data name="ToolsFrameworks" xml:space="preserve">
    <value>Narzędzia i biblioteki</value>
  </data>
</root>