<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfirmPasswordFieldEmpty" xml:space="preserve">
    <value>Pole nie może być puste.</value>
  </data>
  <data name="EmailFieldEmpty" xml:space="preserve">
    <value>Pole nie może być puste.</value>
  </data>
  <data name="EmailInvalid" xml:space="preserve">
    <value>Email jest nieprawidłowy.</value>
  </data>
  <data name="EmailMaxLength" xml:space="preserve">
    <value>Email musi być krótszy niż 100 znaków.</value>
  </data>
  <data name="FirstNameFieldEmpty" xml:space="preserve">
    <value>Pole nie może być puste.</value>
  </data>
  <data name="FirstNameMaxLength" xml:space="preserve">
    <value>Imię musi być krótsze niż 50 znaków.</value>
  </data>
  <data name="FirstNameMinLength" xml:space="preserve">
    <value>Imię musi być dłuższe niż 2 znaki.</value>
  </data>
  <data name="LastNameFieldEmpty" xml:space="preserve">
    <value>Pole nie może być puste.</value>
  </data>
  <data name="LastNameMaxLength" xml:space="preserve">
    <value>Nazwisko musi być krótsze niż 50 znaków.</value>
  </data>
  <data name="LastNameMinLength" xml:space="preserve">
    <value>Nazwisko musi być dłuższe niż 2 znaki.</value>
  </data>
  <data name="PasswordDigit" xml:space="preserve">
    <value>Hasło musi zawierać conajmniej jedną cyfrę.</value>
  </data>
  <data name="PasswordFieldEmpty" xml:space="preserve">
    <value>Pole nie może być puste.</value>
  </data>
  <data name="PasswordLowercase" xml:space="preserve">
    <value>Hasło musi zawierać conajmniej jedną małą literę.</value>
  </data>
  <data name="PasswordMaxLength" xml:space="preserve">
    <value>Hasło musi być krósze niż 100 znaków.</value>
  </data>
  <data name="PasswordMinLength" xml:space="preserve">
    <value>Hasło musi być dłuższe niż 8 znaków.</value>
  </data>
  <data name="PasswordsDoNotMatch" xml:space="preserve">
    <value>Hasła nie są takie same.</value>
  </data>
  <data name="PasswordSpecial" xml:space="preserve">
    <value>Hasło musi zawierać conajmniej jeden znak specjalny.</value>
  </data>
  <data name="PasswordUppercase" xml:space="preserve">
    <value>Hasło musi zawierać conajmniej jedną wielką literę.</value>
  </data>
  <data name="UsernameFieldEmpty" xml:space="preserve">
    <value>Pole nie może być puste.</value>
  </data>
  <data name="UsernameMaxLength" xml:space="preserve">
    <value>Nazwa użytkownika musi być krótsza niż 30 znaków.</value>
  </data>
  <data name="UsernameMinLength" xml:space="preserve">
    <value>Nazwa użytkownika musi zawierać conajmniej 3 znaki.</value>
  </data>
  <data name="UsernameSpecialCharacters" xml:space="preserve">
    <value>Nazwa użtkownika nie może zawierać znaków specjalnych.</value>
  </data>
</root>